---
- name: Configure Raspberry Pi K3s Cluster
  hosts: all
  remote_user: k3s
  become: true

  vars:
    btrfs_mount: /mnt/k3s_storage

  roles:
    - role: schwitzd.collection.btrfs
      vars:
        btrfs_device: /dev/nvme0n1
        btrfs_opts: defaults,noatime,compress=zstd:3,ssd,discard=async,space_cache=v2,autodefrag,noexec,nodev,nosuid
        btrfs_partition_overwrite: true
      tags: storage

    - role: schwitzd.collection.sshd_hardening
      vars:
        sshd_hardening_allowed_users:
          - k3s
      tags: sshd

    - role: schwitzd.collection.apt_3rdparty_repo
      vars:
        repos:
          - name: "helm"
            repo: "deb [arch=arm64 signed-by=/etc/apt/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main"
            filename: "helm-stable-debian"
            key_url: "https://baltocdn.com/helm/signing.asc"
            key_file: "helm.gpg"
          - name: "kubernetes"
            repo: "deb [arch=arm64 signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.33/deb/ /"
            filename: "kubernetes-stable-v1.33"
            key_url: "https://pkgs.k8s.io/core:/stable:/v1.33/deb/Release.key"
            key_file: "kubernetes-apt-keyring.gpg"
      when: role == "control-plane"
      tags: apt

    - role: githubixx.cilium_cli
      vars:
        cilium_cli_version: "0.18.4"
        cilium_cli_arch: "arm64"
      when: role == "control-plane"
      tags: k3s-cilium

  tasks:
    - name: Ensure required packages are installed
      ansible.builtin.apt:
        name:
          - open-iscsi
          - jq
          - apt-transport-https
          - helm
          - kubectl
          - dnsutils
        state: present
        update_cache: true
      tags: apt

    # Configure static IPv6 networking using NetworkManager via nmcli
    - name: Set IPv6 to manual and assign static address
      community.general.nmcli:
        type: ethernet
        conn_name: "{{ ipv6_conn_name }}"
        autoconnect: true
        method6: manual
        ip6: ["{{ ipv6_address }}"]
        gw6: "{{ ipv6_gateway }}"
        dns6: "{{ ipv6_dns }}"
        state: present
      notify: Restart NetworkManager
      tags: networking

    # Enable IPv6 Forwarding
    - name: Create a sysctl config file for IPv6 forwarding
      ansible.builtin.copy:
        dest: "/etc/sysctl.d/98-ipv6.conf"
        content: "net.ipv6.conf.all.forwarding = 1\n"
        owner: root
        group: root
        mode: "0644"
      notify: Reload sysctl
      tags: networking

    # Enable cgroups for K3s
    - name: Ensure cgroups are enabled in cmdline.txt
      ansible.builtin.lineinfile:
        path: /boot/firmware/cmdline.txt
        backrefs: true
        regexp: '^((?!cgroup_memory=1).*)$'
        line: '\1 cgroup_memory=1 cgroup_enable=memory'
        state: present
      notify: Reboot system
      tags: k3s-cgroup

    # Longhorn folder
    - name: Create Longhorn data folder under {{ btrfs_mount }}
      ansible.builtin.file:
        path: "{{ btrfs_mount }}/longhorn"
        state: directory
        mode: '0755'
        owner: root
        group: root
      tags: k3s-longhorn

    - name: Set permissions on kubeconfig so root can read it
      ansible.builtin.file:
        path: /home/k3s/.kube/config
        mode: '0640'
        owner: k3s
        group: root
      when: role == "control-plane"
      tags: k3s-post

    # Configure K3s Garbage Collection Settings
    - name: Ensure K3s environment file exists with strict permissions
      ansible.builtin.file:
        path: /etc/systemd/system/k3s.service.env
        state: touch
        mode: '0600'
        owner: root
        group: root
      when: role == "control-plane"
      tags: k3s-post

    - name: Set K3s garbage collection environment variables
      ansible.builtin.lineinfile:
        path: /etc/systemd/system/k3s.service.env
        regexp: "^{{ item.key }}="
        line: "{{ item.key }}={{ item.value }}"
        create: true
      loop:
        - { key: "K3S_GC_IMAGE_AGE", value: "72h" }
        - { key: "K3S_GC_IMAGE_CLEANUP_PERIOD", value: "1d" }
      when: role == "control-plane"
      notify:
        - Reload systemd
        - Restart K3s service
      tags: k3s-post

    - name: Ensure ~/.kube directory exists
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/.kube"
        state: directory
        mode: '0700'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
      tags: k3s-config

    - name: Copy k3s kubeconfig to user home
      ansible.builtin.copy:
        src: /etc/rancher/k3s/k3s.yaml
        dest: "{{ ansible_env.HOME }}/.kube/config"
        remote_src: true
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0600'
        force: true
      tags: k3s-config

    - name: Ensure KUBECONFIG is set in user's shell profile
      ansible.builtin.lineinfile:
        path: "{{ ansible_env.HOME }}/.bashrc"
        line: 'export KUBECONFIG={{ ansible_env.HOME }}/.kube/config'
        state: present
        insertafter: EOF
      tags: k3s-config

    - name: Enable kubectl bash completion in .bashrc
      ansible.builtin.lineinfile:
        path: "{{ ansible_env.HOME }}/.bashrc"
        line: 'source <(kubectl completion bash)'
        state: present
        insertafter: EOF
      tags: k3s-config

    # Schedule Raspberry Pi Shutdown at 08:30 AM
    - name: Deploy graceful shutdown script
      ansible.builtin.template:
        src: k3s-graceful-shutdown.sh.j2
        dest: /usr/local/bin/k3s-graceful-shutdown.sh
        owner: root
        group: root
        mode: '0755'
      tags: shutdown-startup

    - name: Set K3s service name
      ansible.builtin.set_fact:
        k3s_service_name: "{{ 'k3s' if role == 'control-plane' else 'k3s-agent' }}"
      tags: shutdown-startup

    - name: Schedule graceful cluster shutdown
      ansible.builtin.cron:
        name: "Graceful cluster shutdown"
        minute: "20"
        hour: "9"
        job: "/usr/local/bin/k3s-graceful-shutdown.sh"
        user: root
      tags: shutdown-startup

    - name: Deploy k3s-post-startup script
      ansible.builtin.template:
        src: k3s-post-startup.sh.j2
        dest: /usr/local/bin/k3s-post-startup.sh
        mode: "0755"
      notify: Reload systemd
      tags: shutdown-startup

    - name: Deploy k3s-post-startup systemd unit
      ansible.builtin.template:
        src: k3s-post-startup.service.j2
        dest: /etc/systemd/system/k3s-post-startup.service
        mode: "0644"
      notify: Reload systemd
      tags: shutdown-startup

    - name: Enable k3s-post-startup service
      ansible.builtin.systemd:
        name: k3s-post-startup.service
        enabled: true
      tags: shutdown-startup

  handlers:
    - name: Reboot system
      ansible.builtin.reboot:

    - name: Reload sysctl
      ansible.builtin.command: sysctl --system
      changed_when: false

    - name: Reload systemd
      ansible.builtin.systemd:
        daemon_reload: true

    - name: Restart K3s service
      ansible.builtin.systemd:
        name: k3s
        state: restarted

    - name: Restart NetworkManager
      ansible.builtin.systemd:
        name: NetworkManager
        state: restarted
