#!/bin/bash
set -euo pipefail

export KUBECONFIG=/home/k3s/.kube/config
NODE_NAME=$(hostname)
KUBECTL="/usr/bin/kubectl"
COREDNS_IP=$($KUBECTL -n kube-system get svc kube-dns -o jsonpath='{.spec.clusterIP}')
DNS_DOMAIN="kubernetes.default.svc.cluster.local"

log() {
  local ts
  ts=$(date "+%Y-%m-%d %H:%M:%S")
  echo "[$ts] $*" | tee -a /var/log/k3s-post-startup.log
}

log "====================[ STARTUP START ]===================="
log "  Node: $NODE_NAME  |  Role: {{ role }}"

{% if role == "worker" %}
# --- WORKER: Wait ensure control-plane node is ready ---
log "[POST-STARTUP] Worker node detected, waiting 30 seconds for control-plane to be ready..."
sleep 30
{% endif %}

log "[POST-STARTUP] Uncordoning $NODE_NAME..."
$KUBECTL uncordon "$NODE_NAME" || true

# -- Ensure CoreDNS DNS IP is used for resolution --
log "[WAIT] Waiting for CoreDNS pod to be ready"

until nslookup "$DNS_DOMAIN" "$COREDNS_IP" > /dev/null 2>&1; do
  log "  ...still waiting for CoreDNS to resolve '${DNS_DOMAIN}' via ${COREDNS_IP}"
  sleep 15
done

log "[POST-STARTUP] DNS resolution via CoreDNS successful. Removing dns-unready taint from $NODE_NAME."
$KUBECTL taint nodes "$NODE_NAME" dns-unready=true:NoExecute- || true

{% if role == "control-plane" %}
log "[WAIT] for Rook-Ceph to be Ready or Completed..."
while true; do
  NOT_READY=$($KUBECTL -n rook-ceph get pods --no-headers | grep -vE 'Completed|Running' || true | wc -l)

  if [ "$NOT_READY" -eq 0 ]; then
    break
  fi

  log "  ...still waiting for Rook-Ceph pods to become Ready"
  sleep 20
done
log "[POST-STARTUP] All Rook-Ceph pods are Ready"

log "[STARTUP] Locating CNPG cluster (autodetecting namespace and cluster name)..."
# Autodetect CNPG cluster
CNPG_CLUSTER_INFO="$($KUBECTL get cluster.postgresql.cnpg.io --all-namespaces -o json | jq -r '.items[0] | "\(.metadata.namespace) \(.metadata.name)"')"
CNPG_NAMESPACE="$(awk '{print $1}' <<< "$CNPG_CLUSTER_INFO")"
CNPG_CLUSTER_NAME="$(awk '{print $2}' <<< "$CNPG_CLUSTER_INFO")"

if [[ -z "$CNPG_NAMESPACE" ]] || [[ -z "$CNPG_CLUSTER_NAME" ]]; then
  log "[WARN] No CNPG cluster found. Nothing to rehydrate."
else
  log "[STARTUP] Rehydrating CNPG cluster '$CNPG_CLUSTER_NAME' in namespace '$CNPG_NAMESPACE' by removing hibernation annotation..."
  $KUBECTL -n "$CNPG_NAMESPACE" annotate cluster.postgresql.cnpg.io "$CNPG_CLUSTER_NAME" cnpg.io/hibernation- || true
fi

log "[POST-STARTUP] Scaling up ArgoCD Application controller..."
ARGOCD_APPSET=$($KUBECTL get statefulsets -A -l app.kubernetes.io/name=argocd-application-controller -o jsonpath='{range .items[*]}{.metadata.namespace}{";"}{.metadata.name}{"\n"}{end}')

for entry in $ARGOCD_APPSET; do
  ns=$(echo "$entry" | cut -d';' -f1)
  name=$(echo "$entry" | cut -d';' -f2)
  log "  Scaling ApplicationSet controller $name in namespace $ns to 1 replica"
  $KUBECTL -n "$ns" scale statefulsets "$name" --replicas=1
done
{% endif %}
log "===================[ STARTUP COMPLETE ]==================="